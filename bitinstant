#!/usr/bin/env rbx
$: << "lib"
require 'bundler/setup'
require 'trollop'
require 'wopr/exchanges/bitinstant'

parser = Trollop::Parser.new do
    opt :live, "Make live requests"
    banner <<-EOS
Interact with bitinstant.net.
$ bitinstant [fee|quote|callback|order]
EOS
end

def dispatch(args)
  case args[0]
  when "quote"
    if args.length > 1
      resp = Wopr::Exchanges::Bitinstant::Rest.quote(args[1], args[2], args[3], args[4], args[5])
      puts resp
    else
      puts "bitinstant quote <payment_method> <amount> <dest_exchange> <dest_account> <email>"
    end
  when "fee"
    if args.length > 1
      resp = Wopr::Exchanges::Bitinstant::Rest.fee(args[1], args[2], args[3])
      puts resp
    else
      puts "bitinstant fee <payment_method> <dest_exchange> <amount>"
    end
  when "callback"
    if args.length > 1
      resp = Wopr::Exchanges::Bitinstant::Rest.callback(args[1], args[2])
      puts resp
    else
      puts "bitinstant callback <quote_id> <url>"
    end
  when "order"
    if args.length > 1
      resp = Wopr::Exchanges::Bitinstant::Rest.order(args[1], args[2], args[3])
      puts resp
    else
      puts "bitinstant order <payment_method> <quote_id> <code>"
    end
  else
    raise Trollop::HelpNeeded
  end
end

opts = Trollop::with_standard_exception_handling(parser) do
  raise Trollop::HelpNeeded if ARGV.empty? # show help screen
  parser.parse ARGV
  dispatch ARGV
end


